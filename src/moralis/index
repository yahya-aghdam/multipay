import Moralis from 'moralis';
import { MORALIS_API_KEY } from '../config/dotenv';

interface JSONResult { hash: string; nonce: string; transaction_index: string; from_address: string; from_address_label?: string | null; to_address: string; to_address_label?: string | null; value: string; gas: string; gas_price: string; input: string; receipt_cumulative_gas_used: string; receipt_gas_used: string; receipt_contract_address?: string | null; receipt_root?: string | null; receipt_status: string; block_timestamp: string; block_number: string; block_hash: string; transfer_index: number[]; internal_transactions?: { hash: string; from_address: string; to_address: string; value: string; gas: string; gas_used: string; input: string; block_timestamp: string; block_number: string; block_hash: string; }[]; }

const chainList = {
    "etherum": "0x1",
    "bitcoin": "0x2",

}

export default async function getWalletLastTransaction(address: string, chain: string, date: string): Promise<JSONResult> {
    let toReturn: JSONResult = {} as JSONResult;
    try {
        await Moralis.start({
            apiKey: MORALIS_API_KEY
        });

        const response = await Moralis.EvmApi.transaction.getWalletTransactions({
            "chain": chainList[chain],
            "limit": 1,
            "fromDate": date,
            "order": "DESC",
            "address": address
        });

        const result = response.raw.result

        if (result.length != 0) {
            toReturn = response.raw.result[0] as JSONResult
        }
    } catch (e) {
        console.error(e);
    }

    return toReturn
}

